{"remainingRequest":"/Users/roozbeh/Desktop/re/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/roozbeh/Desktop/re/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/roozbeh/Desktop/re/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/roozbeh/Desktop/re/src/components/Works.vue?vue&type=template&id=30d17682&scoped=true&","dependencies":[{"path":"/Users/roozbeh/Desktop/re/src/components/Works.vue","mtime":1598899524543},{"path":"/Users/roozbeh/Desktop/re/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/roozbeh/Desktop/re/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/roozbeh/Desktop/re/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/roozbeh/Desktop/re/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}